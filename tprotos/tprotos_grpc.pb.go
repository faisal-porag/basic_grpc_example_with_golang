// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TProtoServiceClient is the client API for TProtoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TProtoServiceClient interface {
	GetTProto(ctx context.Context, in *TProtoRequest, opts ...grpc.CallOption) (*TProtoResponse, error)
}

type tProtoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTProtoServiceClient(cc grpc.ClientConnInterface) TProtoServiceClient {
	return &tProtoServiceClient{cc}
}

func (c *tProtoServiceClient) GetTProto(ctx context.Context, in *TProtoRequest, opts ...grpc.CallOption) (*TProtoResponse, error) {
	out := new(TProtoResponse)
	err := c.cc.Invoke(ctx, "/tprotos.TProtoService/GetTProto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TProtoServiceServer is the server API for TProtoService service.
// All implementations must embed UnimplementedTProtoServiceServer
// for forward compatibility
type TProtoServiceServer interface {
	GetTProto(context.Context, *TProtoRequest) (*TProtoResponse, error)
	mustEmbedUnimplementedTProtoServiceServer()
}

// UnimplementedTProtoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTProtoServiceServer struct {
}

func (UnimplementedTProtoServiceServer) GetTProto(context.Context, *TProtoRequest) (*TProtoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTProto not implemented")
}
func (UnimplementedTProtoServiceServer) mustEmbedUnimplementedTProtoServiceServer() {}

// UnsafeTProtoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TProtoServiceServer will
// result in compilation errors.
type UnsafeTProtoServiceServer interface {
	mustEmbedUnimplementedTProtoServiceServer()
}

func RegisterTProtoServiceServer(s grpc.ServiceRegistrar, srv TProtoServiceServer) {
	s.RegisterService(&TProtoService_ServiceDesc, srv)
}

func _TProtoService_GetTProto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TProtoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TProtoServiceServer).GetTProto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tprotos.TProtoService/GetTProto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TProtoServiceServer).GetTProto(ctx, req.(*TProtoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TProtoService_ServiceDesc is the grpc.ServiceDesc for TProtoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TProtoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tprotos.TProtoService",
	HandlerType: (*TProtoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTProto",
			Handler:    _TProtoService_GetTProto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tprotos/tprotos.proto",
}
