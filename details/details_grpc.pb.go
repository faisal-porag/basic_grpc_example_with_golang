// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package details

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DetailsServiceClient is the client API for DetailsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DetailsServiceClient interface {
	GetDetails(ctx context.Context, in *DetailsRequest, opts ...grpc.CallOption) (*DetailsResponse, error)
	GetDetailsWithAuthorization(ctx context.Context, in *DetailsRequest, opts ...grpc.CallOption) (*DetailsResponse, error)
}

type detailsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDetailsServiceClient(cc grpc.ClientConnInterface) DetailsServiceClient {
	return &detailsServiceClient{cc}
}

func (c *detailsServiceClient) GetDetails(ctx context.Context, in *DetailsRequest, opts ...grpc.CallOption) (*DetailsResponse, error) {
	out := new(DetailsResponse)
	err := c.cc.Invoke(ctx, "/details.DetailsService/GetDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detailsServiceClient) GetDetailsWithAuthorization(ctx context.Context, in *DetailsRequest, opts ...grpc.CallOption) (*DetailsResponse, error) {
	out := new(DetailsResponse)
	err := c.cc.Invoke(ctx, "/details.DetailsService/GetDetailsWithAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DetailsServiceServer is the server API for DetailsService service.
// All implementations must embed UnimplementedDetailsServiceServer
// for forward compatibility
type DetailsServiceServer interface {
	GetDetails(context.Context, *DetailsRequest) (*DetailsResponse, error)
	GetDetailsWithAuthorization(context.Context, *DetailsRequest) (*DetailsResponse, error)
	mustEmbedUnimplementedDetailsServiceServer()
}

// UnimplementedDetailsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDetailsServiceServer struct {
}

func (UnimplementedDetailsServiceServer) GetDetails(context.Context, *DetailsRequest) (*DetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetails not implemented")
}
func (UnimplementedDetailsServiceServer) GetDetailsWithAuthorization(context.Context, *DetailsRequest) (*DetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailsWithAuthorization not implemented")
}
func (UnimplementedDetailsServiceServer) mustEmbedUnimplementedDetailsServiceServer() {}

// UnsafeDetailsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DetailsServiceServer will
// result in compilation errors.
type UnsafeDetailsServiceServer interface {
	mustEmbedUnimplementedDetailsServiceServer()
}

func RegisterDetailsServiceServer(s grpc.ServiceRegistrar, srv DetailsServiceServer) {
	s.RegisterService(&DetailsService_ServiceDesc, srv)
}

func _DetailsService_GetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetailsServiceServer).GetDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/details.DetailsService/GetDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetailsServiceServer).GetDetails(ctx, req.(*DetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetailsService_GetDetailsWithAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetailsServiceServer).GetDetailsWithAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/details.DetailsService/GetDetailsWithAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetailsServiceServer).GetDetailsWithAuthorization(ctx, req.(*DetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DetailsService_ServiceDesc is the grpc.ServiceDesc for DetailsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DetailsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "details.DetailsService",
	HandlerType: (*DetailsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDetails",
			Handler:    _DetailsService_GetDetails_Handler,
		},
		{
			MethodName: "GetDetailsWithAuthorization",
			Handler:    _DetailsService_GetDetailsWithAuthorization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "details/details.proto",
}
